"""AES module provides AES cipher primitives to encrypt, decrypt and compute any intermediate states.

Ready-to-use selection functions compatible with side-channel analysis framework are provided.
"""
import numpy as _np
import enum
from .._utils import _is_bytes_array

SBOX = _np.array([
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16],
    dtype=_np.uint8
)

INV_SBOX = _np.array([
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D],
    dtype=_np.uint8)


RCON = _np.array([
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]],
    dtype=_np.uint8
)

SHIFT_ROWS = _np.array([0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11], dtype=_np.uint8)
INV_SHIFT_ROWS = _np.array([0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3], dtype=_np.uint8)

XTIME_2 = _np.array([
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E,
    0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE,
    0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,
    0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,
    0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05,
    0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25,
    0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45,
    0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65,
    0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85,
    0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5,
    0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5,
    0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5],
    dtype=_np.uint8)

XTIME_3 = _np.array([
    0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41,
    0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1,
    0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1,
    0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1,
    0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81,
    0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A,
    0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA,
    0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA,
    0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA,
    0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A,
    0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A,
    0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
    0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A],
    dtype=_np.uint8)

XTIME_9 = _np.array([
    0x00, 0x09, 0x12, 0x1B, 0x24, 0x2D, 0x36, 0x3F, 0x48, 0x41, 0x5A, 0x53, 0x6C, 0x65, 0x7E, 0x77,
    0x90, 0x99, 0x82, 0x8B, 0xB4, 0xBD, 0xA6, 0xAF, 0xD8, 0xD1, 0xCA, 0xC3, 0xFC, 0xF5, 0xEE, 0xE7,
    0x3B, 0x32, 0x29, 0x20, 0x1F, 0x16, 0x0D, 0x04, 0x73, 0x7A, 0x61, 0x68, 0x57, 0x5E, 0x45, 0x4C,
    0xAB, 0xA2, 0xB9, 0xB0, 0x8F, 0x86, 0x9D, 0x94, 0xE3, 0xEA, 0xF1, 0xF8, 0xC7, 0xCE, 0xD5, 0xDC,
    0x76, 0x7F, 0x64, 0x6D, 0x52, 0x5B, 0x40, 0x49, 0x3E, 0x37, 0x2C, 0x25, 0x1A, 0x13, 0x08, 0x01,
    0xE6, 0xEF, 0xF4, 0xFD, 0xC2, 0xCB, 0xD0, 0xD9, 0xAE, 0xA7, 0xBC, 0xB5, 0x8A, 0x83, 0x98, 0x91,
    0x4D, 0x44, 0x5F, 0x56, 0x69, 0x60, 0x7B, 0x72, 0x05, 0x0C, 0x17, 0x1E, 0x21, 0x28, 0x33, 0x3A,
    0xDD, 0xD4, 0xCF, 0xC6, 0xF9, 0xF0, 0xEB, 0xE2, 0x95, 0x9C, 0x87, 0x8E, 0xB1, 0xB8, 0xA3, 0xAA,
    0xEC, 0xE5, 0xFE, 0xF7, 0xC8, 0xC1, 0xDA, 0xD3, 0xA4, 0xAD, 0xB6, 0xBF, 0x80, 0x89, 0x92, 0x9B,
    0x7C, 0x75, 0x6E, 0x67, 0x58, 0x51, 0x4A, 0x43, 0x34, 0x3D, 0x26, 0x2F, 0x10, 0x19, 0x02, 0x0B,
    0xD7, 0xDE, 0xC5, 0xCC, 0xF3, 0xFA, 0xE1, 0xE8, 0x9F, 0x96, 0x8D, 0x84, 0xBB, 0xB2, 0xA9, 0xA0,
    0x47, 0x4E, 0x55, 0x5C, 0x63, 0x6A, 0x71, 0x78, 0x0F, 0x06, 0x1D, 0x14, 0x2B, 0x22, 0x39, 0x30,
    0x9A, 0x93, 0x88, 0x81, 0xBE, 0xB7, 0xAC, 0xA5, 0xD2, 0xDB, 0xC0, 0xC9, 0xF6, 0xFF, 0xE4, 0xED,
    0x0A, 0x03, 0x18, 0x11, 0x2E, 0x27, 0x3C, 0x35, 0x42, 0x4B, 0x50, 0x59, 0x66, 0x6F, 0x74, 0x7D,
    0xA1, 0xA8, 0xB3, 0xBA, 0x85, 0x8C, 0x97, 0x9E, 0xE9, 0xE0, 0xFB, 0xF2, 0xCD, 0xC4, 0xDF, 0xD6,
    0x31, 0x38, 0x23, 0x2A, 0x15, 0x1C, 0x07, 0x0E, 0x79, 0x70, 0x6B, 0x62, 0x5D, 0x54, 0x4F, 0x46],
    dtype=_np.uint8)

XTIME_11 = _np.array([
    0x00, 0x0B, 0x16, 0x1D, 0x2C, 0x27, 0x3A, 0x31, 0x58, 0x53, 0x4E, 0x45, 0x74, 0x7F, 0x62, 0x69,
    0xB0, 0xBB, 0xA6, 0xAD, 0x9C, 0x97, 0x8A, 0x81, 0xE8, 0xE3, 0xFE, 0xF5, 0xC4, 0xCF, 0xD2, 0xD9,
    0x7B, 0x70, 0x6D, 0x66, 0x57, 0x5C, 0x41, 0x4A, 0x23, 0x28, 0x35, 0x3E, 0x0F, 0x04, 0x19, 0x12,
    0xCB, 0xC0, 0xDD, 0xD6, 0xE7, 0xEC, 0xF1, 0xFA, 0x93, 0x98, 0x85, 0x8E, 0xBF, 0xB4, 0xA9, 0xA2,
    0xF6, 0xFD, 0xE0, 0xEB, 0xDA, 0xD1, 0xCC, 0xC7, 0xAE, 0xA5, 0xB8, 0xB3, 0x82, 0x89, 0x94, 0x9F,
    0x46, 0x4D, 0x50, 0x5B, 0x6A, 0x61, 0x7C, 0x77, 0x1E, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2F,
    0x8D, 0x86, 0x9B, 0x90, 0xA1, 0xAA, 0xB7, 0xBC, 0xD5, 0xDE, 0xC3, 0xC8, 0xF9, 0xF2, 0xEF, 0xE4,
    0x3D, 0x36, 0x2B, 0x20, 0x11, 0x1A, 0x07, 0x0C, 0x65, 0x6E, 0x73, 0x78, 0x49, 0x42, 0x5F, 0x54,
    0xF7, 0xFC, 0xE1, 0xEA, 0xDB, 0xD0, 0xCD, 0xC6, 0xAF, 0xA4, 0xB9, 0xB2, 0x83, 0x88, 0x95, 0x9E,
    0x47, 0x4C, 0x51, 0x5A, 0x6B, 0x60, 0x7D, 0x76, 0x1F, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2E,
    0x8C, 0x87, 0x9A, 0x91, 0xA0, 0xAB, 0xB6, 0xBD, 0xD4, 0xDF, 0xC2, 0xC9, 0xF8, 0xF3, 0xEE, 0xE5,
    0x3C, 0x37, 0x2A, 0x21, 0x10, 0x1B, 0x06, 0x0D, 0x64, 0x6F, 0x72, 0x79, 0x48, 0x43, 0x5E, 0x55,
    0x01, 0x0A, 0x17, 0x1C, 0x2D, 0x26, 0x3B, 0x30, 0x59, 0x52, 0x4F, 0x44, 0x75, 0x7E, 0x63, 0x68,
    0xB1, 0xBA, 0xA7, 0xAC, 0x9D, 0x96, 0x8B, 0x80, 0xE9, 0xE2, 0xFF, 0xF4, 0xC5, 0xCE, 0xD3, 0xD8,
    0x7A, 0x71, 0x6C, 0x67, 0x56, 0x5D, 0x40, 0x4B, 0x22, 0x29, 0x34, 0x3F, 0x0E, 0x05, 0x18, 0x13,
    0xCA, 0xC1, 0xDC, 0xD7, 0xE6, 0xED, 0xF0, 0xFB, 0x92, 0x99, 0x84, 0x8F, 0xBE, 0xB5, 0xA8, 0xA3],
    dtype=_np.uint8)

XTIME_13 = _np.array([
    0x00, 0x0D, 0x1A, 0x17, 0x34, 0x39, 0x2E, 0x23, 0x68, 0x65, 0x72, 0x7F, 0x5C, 0x51, 0x46, 0x4B,
    0xD0, 0xDD, 0xCA, 0xC7, 0xE4, 0xE9, 0xFE, 0xF3, 0xB8, 0xB5, 0xA2, 0xAF, 0x8C, 0x81, 0x96, 0x9B,
    0xBB, 0xB6, 0xA1, 0xAC, 0x8F, 0x82, 0x95, 0x98, 0xD3, 0xDE, 0xC9, 0xC4, 0xE7, 0xEA, 0xFD, 0xF0,
    0x6B, 0x66, 0x71, 0x7C, 0x5F, 0x52, 0x45, 0x48, 0x03, 0x0E, 0x19, 0x14, 0x37, 0x3A, 0x2D, 0x20,
    0x6D, 0x60, 0x77, 0x7A, 0x59, 0x54, 0x43, 0x4E, 0x05, 0x08, 0x1F, 0x12, 0x31, 0x3C, 0x2B, 0x26,
    0xBD, 0xB0, 0xA7, 0xAA, 0x89, 0x84, 0x93, 0x9E, 0xD5, 0xD8, 0xCF, 0xC2, 0xE1, 0xEC, 0xFB, 0xF6,
    0xD6, 0xDB, 0xCC, 0xC1, 0xE2, 0xEF, 0xF8, 0xF5, 0xBE, 0xB3, 0xA4, 0xA9, 0x8A, 0x87, 0x90, 0x9D,
    0x06, 0x0B, 0x1C, 0x11, 0x32, 0x3F, 0x28, 0x25, 0x6E, 0x63, 0x74, 0x79, 0x5A, 0x57, 0x40, 0x4D,
    0xDA, 0xD7, 0xC0, 0xCD, 0xEE, 0xE3, 0xF4, 0xF9, 0xB2, 0xBF, 0xA8, 0xA5, 0x86, 0x8B, 0x9C, 0x91,
    0x0A, 0x07, 0x10, 0x1D, 0x3E, 0x33, 0x24, 0x29, 0x62, 0x6F, 0x78, 0x75, 0x56, 0x5B, 0x4C, 0x41,
    0x61, 0x6C, 0x7B, 0x76, 0x55, 0x58, 0x4F, 0x42, 0x09, 0x04, 0x13, 0x1E, 0x3D, 0x30, 0x27, 0x2A,
    0xB1, 0xBC, 0xAB, 0xA6, 0x85, 0x88, 0x9F, 0x92, 0xD9, 0xD4, 0xC3, 0xCE, 0xED, 0xE0, 0xF7, 0xFA,
    0xB7, 0xBA, 0xAD, 0xA0, 0x83, 0x8E, 0x99, 0x94, 0xDF, 0xD2, 0xC5, 0xC8, 0xEB, 0xE6, 0xF1, 0xFC,
    0x67, 0x6A, 0x7D, 0x70, 0x53, 0x5E, 0x49, 0x44, 0x0F, 0x02, 0x15, 0x18, 0x3B, 0x36, 0x21, 0x2C,
    0x0C, 0x01, 0x16, 0x1B, 0x38, 0x35, 0x22, 0x2F, 0x64, 0x69, 0x7E, 0x73, 0x50, 0x5D, 0x4A, 0x47,
    0xDC, 0xD1, 0xC6, 0xCB, 0xE8, 0xE5, 0xF2, 0xFF, 0xB4, 0xB9, 0xAE, 0xA3, 0x80, 0x8D, 0x9A, 0x97],
    dtype=_np.uint8)

XTIME_14 = _np.array([
    0x00, 0x0E, 0x1C, 0x12, 0x38, 0x36, 0x24, 0x2A, 0x70, 0x7E, 0x6C, 0x62, 0x48, 0x46, 0x54, 0x5A,
    0xE0, 0xEE, 0xFC, 0xF2, 0xD8, 0xD6, 0xC4, 0xCA, 0x90, 0x9E, 0x8C, 0x82, 0xA8, 0xA6, 0xB4, 0xBA,
    0xDB, 0xD5, 0xC7, 0xC9, 0xE3, 0xED, 0xFF, 0xF1, 0xAB, 0xA5, 0xB7, 0xB9, 0x93, 0x9D, 0x8F, 0x81,
    0x3B, 0x35, 0x27, 0x29, 0x03, 0x0D, 0x1F, 0x11, 0x4B, 0x45, 0x57, 0x59, 0x73, 0x7D, 0x6F, 0x61,
    0xAD, 0xA3, 0xB1, 0xBF, 0x95, 0x9B, 0x89, 0x87, 0xDD, 0xD3, 0xC1, 0xCF, 0xE5, 0xEB, 0xF9, 0xF7,
    0x4D, 0x43, 0x51, 0x5F, 0x75, 0x7B, 0x69, 0x67, 0x3D, 0x33, 0x21, 0x2F, 0x05, 0x0B, 0x19, 0x17,
    0x76, 0x78, 0x6A, 0x64, 0x4E, 0x40, 0x52, 0x5C, 0x06, 0x08, 0x1A, 0x14, 0x3E, 0x30, 0x22, 0x2C,
    0x96, 0x98, 0x8A, 0x84, 0xAE, 0xA0, 0xB2, 0xBC, 0xE6, 0xE8, 0xFA, 0xF4, 0xDE, 0xD0, 0xC2, 0xCC,
    0x41, 0x4F, 0x5D, 0x53, 0x79, 0x77, 0x65, 0x6B, 0x31, 0x3F, 0x2D, 0x23, 0x09, 0x07, 0x15, 0x1B,
    0xA1, 0xAF, 0xBD, 0xB3, 0x99, 0x97, 0x85, 0x8B, 0xD1, 0xDF, 0xCD, 0xC3, 0xE9, 0xE7, 0xF5, 0xFB,
    0x9A, 0x94, 0x86, 0x88, 0xA2, 0xAC, 0xBE, 0xB0, 0xEA, 0xE4, 0xF6, 0xF8, 0xD2, 0xDC, 0xCE, 0xC0,
    0x7A, 0x74, 0x66, 0x68, 0x42, 0x4C, 0x5E, 0x50, 0x0A, 0x04, 0x16, 0x18, 0x32, 0x3C, 0x2E, 0x20,
    0xEC, 0xE2, 0xF0, 0xFE, 0xD4, 0xDA, 0xC8, 0xC6, 0x9C, 0x92, 0x80, 0x8E, 0xA4, 0xAA, 0xB8, 0xB6,
    0x0C, 0x02, 0x10, 0x1E, 0x34, 0x3A, 0x28, 0x26, 0x7C, 0x72, 0x60, 0x6E, 0x44, 0x4A, 0x58, 0x56,
    0x37, 0x39, 0x2B, 0x25, 0x0F, 0x01, 0x13, 0x1D, 0x47, 0x49, 0x5B, 0x55, 0x7F, 0x71, 0x63, 0x6D,
    0xD7, 0xD9, 0xCB, 0xC5, 0xEF, 0xE1, 0xF3, 0xFD, 0xA7, 0xA9, 0xBB, 0xB5, 0x9F, 0x91, 0x83, 0x8D],
    dtype=_np.uint8)

# cols_out: number of columns of 4 bytes in the output expanded key
_cols_out = {
    16: 44,  # AES 128
    24: 52,  # AES 192
    32: 60   # AES 256
}

_key_length = {
    11: 16,  # AES 128
    13: 24,  # AES 192
    15: 32   # AES 256
}


class Steps(enum.IntEnum):
    """Enumeration for the four AES round steps."""

    SUB_BYTES = 0
    SHIFT_ROWS = 1
    MIX_COLUMNS = 2
    ADD_ROUND_KEY = 3


class InverseSteps(enum.IntEnum):
    """Enumeration for the four inverse AES round steps."""

    INV_ADD_ROUND_KEY = 0
    INV_MIX_COLUMNS = 1
    INV_SHIFT_ROWS = 2
    INV_SUB_BYTES = 3


def _is_bytes_of_len(state, length=[16]):
    _is_bytes_array(state)
    if state.shape[-1] not in length:
        raise ValueError(f'state last dimension should be in {length}, not {state.shape[-1]}.')
    return True


def key_schedule(key):
    """Compute AES key schedules for any AES mode.

    Handle AES-128, AES-192, AES-256 modes, respectively 16, 24 and 32 bytes vector key length, given as numpy array input.

    Args:
        key (numpy.ndarray): numpy byte array (dtype uint8). Last dimension must be 16, 24, or 32 long, for resp. AES 128, 192 and 256 mode.

    Returns:
        (numpy.ndarray): numpy byte array containing all round keys, with shape (number of keys, number of rounds, 16), or (number of rounds, 16) if
            only one key has been provided.

    Examples:
        import numpy as np
        key = np.array([0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C], dtype=np.uint8)
        schedule = key_schedule(key)

    """
    keys = key_expansion(key, col_in=0)
    if key.shape[:-1]:
        final_shape = (keys.shape[0], int(keys.shape[1] / 16), 16)
    else:
        final_shape = (int(keys.shape[1] / 16), 16)
    return keys.reshape(final_shape)


def inv_key_schedule(key, round_in=10):
    master = key_expansion(key, col_in=round_in * 4, col_out=0)[0, :16]
    return key_schedule(master)


def key_expansion(key_cols, col_in=0, col_out=None):
    """Compute AES key key expansion for any AES mode, given any known key bytes in the key schedule.

    Handle AES-128, AES-192, AES-256 modes, respectively 16, 24 and 32 bytes vector key length, given as numpy array input.
    Key expansion is computed from column index col_in to column index col_out, forward (resp. backward) if col_in < col_out (resp. col_in > col_out).

    Args:
        key_cols (numpy.ndarray): numpy byte array (dtype uint8). Last dimension must be 16, 24, or 32 long, for resp. AES 128, 192 and 256 mode.
        col_in (int, default=0): column index of the first key column provided. col_in should be between 0 and resp. 44 (52, 60) for 16 (24, 32) key length.
        col_out (int, default=None): column index of the last key column to expand. col_out should be between 0 and
            resp. 44 (52, 60) for 16 (24, 32) key length. If not provided, col_out is set to the maximum possible value.
    Returns:
        (numpy.ndarray): numpy byte array containing all expanded key bytes, with shape (number of keys, number of bytes).

    """
    _is_bytes_of_len(key_cols, length=[16, 24, 32])
    bytes_key_length = key_cols.shape[-1]
    number_of_keys = key_cols.shape[0] if key_cols.shape[:-1] else 1
    cols_in = int(bytes_key_length / 4)

    max_col_out = _cols_out[bytes_key_length]
    col_out = max_col_out if col_out is None else col_out

    if col_in < 0 or col_out < 0:
        raise ValueError(f'col_in and col_out must be greater than 0, not (resp.) {col_in} and {col_out}.')
    if col_out > max_col_out:
        raise ValueError(f'col_out should be lesser than {max_col_out}, not {col_out}.')

    if col_in < col_out:
        return _expand_forward(key_cols, bytes_key_length, cols_in, number_of_keys, col_in, col_out)
    else:
        return _expand_backward(key_cols, bytes_key_length, cols_in, number_of_keys, col_in, col_out)


def _expand_forward(key_cols, bytes_key_length, cols_in, number_of_keys, col_in, col_out):

    cols_range = range(col_in, col_out)
    n_cols = col_out - col_in

    key = key_cols.reshape((-1, cols_in, 4))
    expanded_key = _np.empty((number_of_keys, col_out, 4), dtype='uint8')
    final_shape = (number_of_keys, (n_cols * 4))
    for index, col in enumerate(cols_range):
        if index < cols_in:
            expanded_key[:, col] = key[:, index, :]
        elif col % cols_in == 0:
            expanded_key[:, col] = SBOX[_np.roll(expanded_key[:, col - 1], shift=-1, axis=-1)]
            expanded_key[:, col] = _np.bitwise_xor(expanded_key[:, col], RCON[int(col / cols_in) - 1])
            expanded_key[:, col] = _np.bitwise_xor(expanded_key[:, col], expanded_key[:, col - cols_in])
        elif bytes_key_length == 32 and col % 4 == 0:
            expanded_key[:, col] = _np.bitwise_xor(
                SBOX[expanded_key[:, col - 1]],
                expanded_key[:, col - cols_in]
            )
        else:
            expanded_key[:, col] = _np.bitwise_xor(expanded_key[:, col - 1], expanded_key[:, col - cols_in])
    return expanded_key[:, col_in:].reshape(final_shape)


def _expand_backward(key_cols, bytes_key_length, cols_in, number_of_keys, col_in, col_out):
    cols_range = range(col_in + cols_in - 1, col_out - 1, -1)
    n_cols = col_in - col_out + cols_in

    key = key_cols.reshape((-1, cols_in, 4))
    expanded_key = _np.empty((number_of_keys, col_in + cols_in, 4), dtype='uint8')
    final_shape = (number_of_keys, (n_cols * 4))
    for index, col in enumerate(cols_range):
        if index < cols_in:
            expanded_key[:, col] = key[:, cols_in - index - 1, :]
        elif col % cols_in == 0:
            expanded_key[:, col] = _np.bitwise_xor(expanded_key[:, col + cols_in], SBOX[_np.roll(expanded_key[:, col + cols_in - 1], shift=-1, axis=-1)])
            expanded_key[:, col] = _np.bitwise_xor(expanded_key[:, col], RCON[int(col / cols_in)])
        elif bytes_key_length == 32 and col % 4 == 0:
            expanded_key[:, col] = _np.bitwise_xor(
                SBOX[expanded_key[:, col + cols_in - 1]],
                expanded_key[:, col + cols_in])
        else:
            expanded_key[:, col] = _np.bitwise_xor(expanded_key[:, col + cols_in], expanded_key[:, col + cols_in - 1])
    return expanded_key[:, col_out:].reshape(final_shape)


def sub_bytes(state):
    """Compute AES sub bytes operation results on a 16 bytes words state.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.

    Returns:
        (numpy.ndarray) AES sub bytes result with same dimensions as input state.

    """
    _is_bytes_of_len(state)
    return SBOX[state]


def inv_sub_bytes(state):
    """Compute AES inverse sub bytes operation results on a 16 bytes words state.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.

    Returns:
        (numpy.ndarray) AES inverse sub bytes result with same dimensions as input state.

    """
    _is_bytes_of_len(state)
    return INV_SBOX[state]


def shift_rows(state):
    """Compute AES shift rows operation results on a 16 bytes words state.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.

    Returns:
        (numpy.ndarray) AES shift rows result with same dimensions as input state.

    """
    _is_bytes_of_len(state)
    dims = state.shape
    return state.reshape((-1, 16))[:, SHIFT_ROWS].reshape(dims)


def inv_shift_rows(state):
    """Compute AES inverse shift rows operation results on a 16 bytes words state.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.

    Returns:
        (numpy.ndarray) AES inverse shift rows result with same dimensions as input state.

    """
    _is_bytes_of_len(state)
    dims = state.shape
    return state.reshape((-1, 16))[:, INV_SHIFT_ROWS].reshape(dims)


def mix_column(vectors):
    """Compute AES mix column operation results on 4 bytes vectors.

    Args:
        state (numpy.ndarray): a uint8 array of 4 bytes vectors as last dimension.

    Returns:
        (numpy.ndarray) AES mix column result with same dimensions as input vectors.

    """
    _is_bytes_of_len(vectors, length=[4])
    dims = vectors.shape
    data = vectors.reshape((-1, 4))
    out = _np.zeros(data.shape, dtype='uint8')
    for row in range(4):
        tmp = _np.array([
            XTIME_2[data[:, row]],
            data[:, row],
            data[:, row],
            XTIME_3[data[:, row]]
        ], dtype=_np.uint8).T
        tmp = _np.roll(tmp, shift=row, axis=-1)
        out = _np.bitwise_xor(out, tmp)
    return out.reshape(dims)


def mix_columns(state):
    """Compute AES mix columns operation results on a 16 bytes words state.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.

    Returns:
        (numpy.ndarray) AES mix columns result with same dimensions as input state.

    """
    _is_bytes_of_len(state)
    dims = state.shape
    data = state.reshape((-1, 4, 4))
    out = _np.empty(data.shape, dtype='uint8')
    for col in range(4):
        out[:, col] = mix_column(data[:, col])
    return out.reshape(dims)


def inv_mix_column(vectors):
    """Compute AES inverse mix column operation results on 4 bytes vectors.

    Args:
        state (numpy.ndarray): a uint8 array of 4 bytes vectors as last dimension.

    Returns:
        (numpy.ndarray) AES inverse mix column result with same dimensions as input vectors.

    """
    _is_bytes_of_len(vectors, length=[4])
    dims = vectors.shape
    data = vectors.reshape((-1, 4))
    out = _np.zeros(data.shape, dtype=_np.uint8)
    for row in range(4):
        tmp = _np.array([
            XTIME_14[data[:, row]],
            XTIME_9[data[:, row]],
            XTIME_13[data[:, row]],
            XTIME_11[data[:, row]]],
            dtype=_np.uint8).T
        tmp = _np.roll(tmp, shift=row, axis=-1)
        out = _np.bitwise_xor(out, tmp)
    return out.reshape(dims)


def inv_mix_columns(state):
    """Compute AES inverse mix columns operation results on a 16 bytes words state.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.

    Returns:
        (numpy.ndarray) AES inverse mix columns result with same dimensions as input state.

    """
    _is_bytes_of_len(state)
    dims = state.shape
    data = state.reshape((-1, 4, 4))
    out = _np.empty(data.shape, dtype='uint8')
    for col in range(4):
        out[:, col] = inv_mix_column(data[:, col])
    return out.reshape(dims)


def add_round_key(state, keys):
    """Compute AES final xor operation between a 16 bytes words state and a round keys array.

    Depending on the shapes of state and keys, the result can be:

        - one state added to one key if state is (16,) and keys is (16,)
        - one state added to n keys if state is (16,) and keys is (n, 16)
        - n states added to 1 key if state is (n, 16) and keys is (16)
        - states added to keys, combined by pairs if state is (n, 16) and keys is (n, 16).

    In every other case, a ValueError will be raised.

    Args:
        state (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.
        keys (numpy.ndarray): a uint8 array of 16 bytes round keys as last dimension.

    Returns:
        (numpy.ndarray) xor result between state and keys.

    """
    _is_bytes_of_len(state)
    _is_bytes_of_len(keys)
    return _np.bitwise_xor(state, keys)


inv_add_round_key = add_round_key


def _identity(state):
    return state


_ENC_FIRST_ROUND = [_identity, _identity, _identity, add_round_key]
_ENC_ROUND = [sub_bytes, shift_rows, mix_columns, add_round_key]
_ENC_LAST_ROUND = [sub_bytes, shift_rows, _identity, add_round_key]

_DEC_FIRST_ROUND = [inv_add_round_key, _identity, inv_shift_rows, inv_sub_bytes]
_DEC_ROUND = [inv_add_round_key, inv_mix_columns, inv_shift_rows, inv_sub_bytes]
_DEC_LAST_ROUND = [inv_add_round_key, _identity, _identity, _identity]


def encrypt(plaintext, key, at_round=None, after_step=Steps.ADD_ROUND_KEY):
    """Encrypt plaintext using AES with provided key.

    AES-128, AES-192 and AES-256 modes are supported, depending on the length of key.
    Multiple parallel encryption is supported, with several modes:

        - multiple plaintexts with one key
        - one plaintext with multiple keys
        - multiple plaintexts and keys associated by pairs

    Encryption can be stopped at any desired round and any step in the targeted round.

    Args:
        plaintext (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.
            Multiple plaintexts can be provided as an array of shape (N, 16).
        key (numpy.ndarray): a uint8 array of 16, 24 or 32 bytes words as last dimension.
            Multiple keys can be provided as an array of shape (N, 16).
        at_round (int, default: None): stop encryption at the end of the targeted round. Must be between 0 and the number of rounds of the mode.
        after_step (int): stop encryption after targeted operation of the round. Each round have 4 operations (first and last rounds use identity functions.)
            Must be between 0 and 3. Use Steps and InverseSteps enumeration to benefit of an explicit steps naming.

    Returns:
        (numpy.ndarray) resulting ciphertext.

        If multiple keys and/or plaintexts are provided, ciphertext can be:
            - if one key and one plaintext are provided, ciphertext has a shape (16)
            - if N keys (resp. N plaintexts) are provided with one plaintext (resp. one key), ciphertext has a shape (N, 16)
                with N resulting encryptions of plaintext (resp. encryptions of plaintexts with key)
            - if N keys and N plaintexts are provided, result has a shape (N, 16), with N resulting encryptions of each plaintext with each key
                of same index. Keys and plaintexts must have the same first dimension.

    Raises:
        TypeError and ValueError if ciphertext and key are not of the proper types or have incompatible shapes.

    """
    operations = [_ENC_FIRST_ROUND, _ENC_ROUND, _ENC_LAST_ROUND]
    return _parametric_cipher(state=plaintext, key=key, operations=operations, at_round=at_round, after_step=after_step)


def decrypt(ciphertext, key, at_round=None, after_step=InverseSteps.INV_SUB_BYTES):
    """Decrypt ciphertext using AES with provided key.

    AES-128, AES-192 and AES-256 modes are supported, depending on the length of key.
    Multiple parallel decryption is supported, with several modes:

        - multiple ciphertexts with one key
        - one ciphertext with multiple keys
        - multiple ciphertexts and keys associated by pairs

    Decryption can be stopped at any desired round and any step in the targeted round.

    Args:
        ciphertext (numpy.ndarray): a uint8 array of 16 bytes words as last dimension.
            Multiple ciphertext can be provided as an array of shape (N, 16).
        key (numpy.ndarray): a uint8 array of 16, 24 or 32 bytes words as last dimension.
            Multiple keys can be provided as an array of shape (N, 16).
        at_round (int, default: None): stop decryption at the end of the targeted round. Must be between 0 and the number of rounds of the mode.
        after_step (int): stop decryption after targeted operation of the round. Each round have 4 operations (first and last rounds use identity functions.)
            Must be between 0 and 3. Use Steps and InverseSteps enumeration to benefit of an explicit steps naming.

    Returns:
        (numpy.ndarray) resulting plaintext.

        If multiple keys and/or ciphertexts are provided, plaintext can be:
            - if one key and one ciphertext are provided, plaintext has a shape (16)
            - if N keys (resp. N ciphertexts) are provided with one ciphertext (resp. one key), plaintext has a shape (N, 16)
                with N resulting decryption of ciphertext (resp. decryptions of ciphertexts with key)
            - if N keys and N ciphertexts are provided, result has a shape (N, 16), with N resulting decryptions of each ciphertext with each key
                of same index. Keys and ciphertexts must have the same first dimension.

    Raises:
        TypeError and ValueError if ciphertext and key are not of the proper types or have incompatible shapes.

    """
    operations = [_DEC_FIRST_ROUND, _DEC_ROUND, _DEC_LAST_ROUND]
    return _parametric_cipher(state=ciphertext, key=key, operations=operations, mode='decrypt', at_round=at_round, after_step=after_step)


def _parametric_cipher(state, key, operations, after_step, at_round=None, mode='encrypt'):
    _is_bytes_of_len(state)

    round_keys = _prepare_keys(key=key, state=state, mode=mode)

    rounds = _prepare_rounds(round_keys=round_keys, at_round=at_round, after_step=after_step, operations=operations)

    if state.ndim == 1:
        out_state = _np.array([_np.copy(state) for i in range(round_keys.shape[0])], dtype='uint8')
    else:
        out_state = _np.array(state, dtype='uint8', copy=True)

    for i, _round_operations in enumerate(rounds):
        for step, operation in enumerate(_round_operations):
            if operation == add_round_key:
                out_state = add_round_key(state=out_state, keys=round_keys[:, i, :])
            else:
                out_state = operation(state=out_state)
    return out_state.squeeze()


def _prepare_keys(key, state, mode):
    _is_bytes_of_len(key, length=[16, 24, 32])

    if key.ndim > 2 or state.ndim > 2:
        raise ValueError(f'{mode} support only list of inputs and keys. Inputs and keys should be limited to arrays of shape (N, 16).')
    elif key.ndim == 2 and state.ndim == 2 and key.shape[0] != state.shape[0]:
        raise ValueError(f'{mode} support using 2 dimensions array for both keys and inputs only if first dimension of both are equals.')

    round_keys = key_schedule(key)
    if round_keys.ndim == 2:
        round_keys = round_keys.reshape((1, ) + round_keys.shape)

    if mode == 'decrypt':
        round_keys = _np.flip(round_keys, axis=1)
    return round_keys


def _prepare_rounds(round_keys, at_round, after_step, operations):
    n_rounds = round_keys.shape[1]
    at_round = n_rounds - 1 if at_round is None else at_round

    if at_round > n_rounds or at_round < 0:
        raise ValueError(f'at_round must be > 0 and < {n_rounds}, not {at_round}.')

    if not isinstance(after_step, int):
        raise TypeError(f'after_step must be an integer or a Steps (InverseSteps) enum value, not {after_step}.')
    if after_step < 0 or after_step > 3:
        raise ValueError(f'after_step can\'t be < 0 or > 3, not {after_step}. Use Step or InverseStep enumeration.')

    rounds = [operations[0]]
    for i in range(1, at_round + 1):
        if i == n_rounds - 1:
            rounds.append(operations[-1])
        else:
            rounds.append(operations[1])
    rounds[-1] = rounds[-1][:after_step + 1]
    return rounds
